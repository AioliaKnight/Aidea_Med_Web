name: 部署到 GitHub Pages

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.editorconfig'
      - 'docs/**'
      - '.vscode/**'
      - '.idea/**'
  pull_request:
    branches: [ main ]
  # 允許手動觸發工作流程
  workflow_dispatch:

# 設定環境變數
env:
  NODE_VERSION: '18'
  NEXT_TELEMETRY_DISABLED: '1'
  NEXT_SHARP_PATH: './node_modules/sharp'

jobs:
  build-and-deploy:
    name: 建置與部署
    runs-on: ubuntu-latest
    
    # 設定權限
    permissions:
      contents: write
      pages: write
      
    # 設定並行處理策略
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    
    steps:
      - name: 檢出程式碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
        
      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 還原快取
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
            node_modules
            ~/.npm
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-
          
      - name: 安裝依賴
        run: |
          npm ci --prefer-offline --no-audit
          npm audit fix || true
        
      - name: 顯示環境資訊
        run: |
          echo "Node.js 版本: $(node -v)"
          echo "npm 版本: $(npm -v)"
          npx next info
          
      - name: 執行類型檢查
        run: npm run type-check
        
      - name: 執行程式碼檢查
        run: |
          npm run lint || true
          
      - name: 建置專案
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
          NEXT_PUBLIC_SANITY_DATASET: ${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
          NEXT_PUBLIC_SANITY_API_VERSION: ${{ secrets.NEXT_PUBLIC_SANITY_API_VERSION }}
          NEXT_PUBLIC_BASE_URL: https://aioliaknight.github.io/aidea-med-web
          
      # 優化建置產物
      - name: 優化建置產物
        run: |
          # 移除不必要的檔案
          rm -rf out/**/*.map
          # 壓縮 HTML
          find out -name "*.html" -exec npx html-minifier-terser --collapse-whitespace --remove-comments --remove-optional-tags --remove-redundant-attributes --remove-script-type-attributes --remove-tag-whitespace --use-short-doctype --minify-css true --minify-js true {} -o {} \;
          # 壓縮 JSON
          find out -name "*.json" -exec npx json-minify {} \; -exec mv {}.min {} \;
          # 生成路由報告
          echo "路由清單：" > out/routes.txt
          find out -name "*.html" -exec basename {} .html \; | sort >> out/routes.txt
          
      # 確保將 .nojekyll 檔案新增到輸出目錄
      - name: 新增 .nojekyll 檔案
        run: |
          touch out/.nojekyll
          echo "建置完成時間: $(date)" > out/build-info.txt
          echo "版本: $(node -p "require('./package.json').version")" >> out/build-info.txt
          echo "提交: ${{ github.sha }}" >> out/build-info.txt
          echo "分支: ${{ github.ref_name }}" >> out/build-info.txt
          
      - name: 設定自訂網域
        if: github.ref == 'refs/heads/main'
        run: |
          if [ -n "${{ secrets.CUSTOM_DOMAIN }}" ]; then
            echo "${{ secrets.CUSTOM_DOMAIN }}" > out/CNAME
          fi
          
      - name: 部署到 GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: out
          branch: gh-pages
          clean: true
          single-commit: true
          
      - name: 檢查部署狀態
        if: github.ref == 'refs/heads/main'
        run: |
          echo "部署已完成，正在等待頁面可訪問..."
          sleep 30
          
          # 檢查部署狀態
          MAX_RETRIES=5
          RETRY_COUNT=0
          SITE_URL="${{ secrets.CUSTOM_DOMAIN || 'aioliaknight.github.io/aidea-med-web' }}"
          
          # 檢查主要路由
          ROUTES=("/" "/service" "/case" "/blog" "/team" "/contact")
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            ALL_ROUTES_ACCESSIBLE=true
            
            for ROUTE in "${ROUTES[@]}"; do
              if ! curl -s -f -o /dev/null "https://$SITE_URL$ROUTE"; then
                ALL_ROUTES_ACCESSIBLE=false
                echo "❌ 路由 $ROUTE 無法訪問"
                break
              fi
            done
            
            if [ "$ALL_ROUTES_ACCESSIBLE" = true ]; then
              echo "✅ 所有主要路由都可以訪問"
              exit 0
            fi
            
            echo "等待網站可訪問... (嘗試 $((RETRY_COUNT + 1))/$MAX_RETRIES)"
            sleep 30
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done
          
          echo "❌ 網站部署可能遇到問題，請檢查 GitHub Pages 設定"
          exit 1
          
      - name: 上傳建置產物
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: next-build
          path: |
            .next
            out
            out/routes.txt
            out/build-info.txt
          retention-days: 7
          
      - name: 清理快取
        if: always()
        run: |
          npm cache clean --force
          rm -rf .next/cache 