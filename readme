# Aidea:Med 官方網站

## 1. 網站定位
- 醫療行銷與牙醫診所行銷的整合行銷顧問公司
- 品牌名稱：Aidea:Med
- 目標客群：醫療診所、牙醫診所

## 2. 技術架構
### 核心框架
- Next.js 15.1.6 (App Router)
- React 18
- TypeScript 5

### 功能支援
- PWA (next-pwa)
- Sanity CMS
- Google Analytics
- Vercel Analytics

### UI/動畫
- Tailwind CSS
- Framer Motion
- Lenis (平滑滾動)

### 開發工具
- ESLint
- Prettier
- Husky (Git Hooks)
- TypeScript

## 3. 視覺設計風格
### 整體風格
- 不透明、平面化設計
- 強調視覺特效但保持簡約
- 現代感的互動體驗
- 清晰的層次關係

### 品牌標準色系
- 主色：品牌紅色 (#FF0000)
- 輔助：純白 (#FFFFFF)、純黑 (#000000)
- 背景：深淺色階的運用

### 設計元素
- 簡潔的幾何形狀
- CSS 動畫效果
- 精緻的微互動
- 優雅的排版結構

## 4. 功能實現狀態
### 已完成功能
- [x] 基礎框架建置
- [x] PWA 配置
- [x] 響應式布局基礎
- [x] Hero Section
  - [x] 平面化動態背景
  - [x] 基礎動畫效果
  - [x] Logo 組件
  - [x] 導航選單
  - [x] 標籤雲動畫
  - [x] 數據展示
- [x] Services Section
  - [x] 服務卡片設計
  - [x] 動畫效果
- [x] Cases Section
  - [x] 案例展示系統
  - [x] 篩選功能
  - [x] 動畫效果
- [x] Team Section
  - [x] 團隊成員展示
  - [x] 社群連結
  - [x] 動畫效果
- [x] Contact Section
  - [x] 表單設計
  - [x] 動畫效果
- [x] 平滑滾動
- [x] 動畫系統整合

### 進行中功能
- [ ] SEO 優化
  - [ ] Meta 標籤
  - [ ] 結構化資料
  - [ ] Sitemap
- [ ] 效能優化
  - [ ] 圖片優化
  - [ ] 代碼分割
  - [ ] 快取策略
- [ ] 表單功能
  - [ ] 驗證邏輯
  - [ ] API 整合
  - [ ] 錯誤處理

### 待實現功能
- [ ] Blog 系統
- [ ] 會員功能
- [ ] 多語系支援
- [ ] 進階互動效果

## 5. 網站架構
### Hero Section
- 視覺設計
  * 品牌紅色背景
  * 平面化動態背景
  * 雙語主標語
  * 簡約現代的排版

- 互動效果
  * Logo 隨滾動變化
  * 標籤雲動畫
  * 數據展示動畫
  * 視差滾動效果

### Services Section
- 服務卡片
- 動畫效果
- CTA 按鈕

### Cases Section
- 案例展示
- 分類篩選
- 詳細資訊

### Team Section
- 團隊介紹
- 社群連結
- 動畫效果

### Contact Section
- 諮詢表單
- 動畫效果
- 驗證功能

## 6. 效能優化策略
### 目前採用的優化
- 圖片優化
  * Next.js Image 組件
  * WebP/AVIF 格式支援
  * 響應式圖片
- CSS 優化
  * Tailwind CSS 按需打包
  * CSS 動畫替代 JavaScript
- JavaScript 優化
  * 動態導入
  * 代碼分割
  * 客戶端渲染控制

### 計劃中的優化
- 資源預加載
- 快取策略
- 代碼壓縮
- 首次內容繪製優化

## 7. 開發指南
### 環境要求
- Node.js 18+
- npm 9+

### 安裝步驟
```bash
# 安裝依賴
npm install

# 開發環境運行
npm run dev

# 建置專案
npm run build

# 運行建置後的專案
npm run start
```

### 環境變數
請參考 `.env.example` 檔案設置必要的環境變數：
- NEXT_PUBLIC_BASE_URL
- NEXT_PUBLIC_GA_MEASUREMENT_ID
- NEXT_PUBLIC_GTM_ID
- NEXT_PUBLIC_SANITY_PROJECT_ID
- NEXT_PUBLIC_SANITY_DATASET
- SANITY_API_TOKEN

### 開發規範
1. 程式碼風格
   - 使用 Prettier 格式化
   - 遵循 ESLint 規則
   - 使用 TypeScript 型別

2. 組件開發
   - 使用函數式組件
   - 實作適當的型別定義
   - 添加必要的註解

3. 提交規範
   - 使用明確的提交訊息
   - 遵循 Git Flow 工作流
   - 提交前進行代碼檢查

## 8. 待優化事項
1. 效能優化
   - [ ] 減少不必要的重渲染
   - [ ] 優化大型組件的載入策略
   - [ ] 實現漸進式加載

2. 使用者體驗
   - [ ] 添加載入狀態
   - [ ] 優化表單驗證
   - [ ] 改善錯誤處理

3. 可訪問性
   - [ ] ARIA 標籤
   - [ ] 鍵盤導航
   - [ ] 螢幕閱讀器支援

4. SEO
   - [ ] Meta 標籤優化
   - [ ] 結構化資料
   - [ ] Sitemap 生成

## 9. 專案結構
```
src/
├── app/                 # Next.js 應用程式目錄
├── components/          # React 組件
│   ├── layout/         # 布局組件
│   ├── sections/       # 頁面區塊組件
│   ├── three/          # 3D/動畫相關組件
│   └── ui/             # UI 組件
├── lib/                # 工具函數和配置
├── types/              # TypeScript 型別定義
├── hooks/              # 自定義 Hooks
└── styles/             # 全局樣式
public/
├── fonts/              # 字體檔案
├── images/             # 圖片資源
└── icons/              # 圖標資源
```

## 10. 注意事項
1. 圖片暫時使用 https://placehold.co
2. 開發時注意效能監控
3. 定期更新依賴套件
4. 保持程式碼簡潔性